package com.mycompany.a;

import java.io.IOException;
import java.io.PrintWriter;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.sql.*;
import java.time.Duration;
import java.time.Instant;

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.*;

@WebServlet(name = "investimento", urlPatterns = {"/investimento"})
public class Investimento extends HttpServlet {

    private final String URL  = "jdbc:derby://localhost:1527/trabalho";
    private final String USER = "eri";
    private final String PASS = "eri";

    /* ---------- UTIL Lazy‑Update ---------- */
    private BigDecimal lazyUpdate(Connection con, int userId) throws SQLException {

        PreparedStatement psSel = con.prepareStatement(
            "SELECT id, valor, ultima_att FROM investimento WHERE usuario_id = ?");
        psSel.setInt(1, userId);
        ResultSet rs = psSel.executeQuery();

        Timestamp agoraTs = new Timestamp(System.currentTimeMillis());

        if (!rs.next()) {
            // cria registro zerado
            PreparedStatement psIns = con.prepareStatement(
                "INSERT INTO investimento (usuario_id, valor, ultima_att) VALUES (?, 0, ?)");
            psIns.setInt(1, userId);
            psIns.setTimestamp(2, agoraTs);
            psIns.executeUpdate();
            return BigDecimal.ZERO;
        }

        int investId = rs.getInt("id");
        BigDecimal valor = rs.getBigDecimal("valor");
        Timestamp ultima = rs.getTimestamp("ultima_att");

        long minutos = Duration.between(ultima.toInstant(), Instant.now()).toMinutes();
        if (minutos > 0) {
            double fator = Math.pow(1.01, minutos);          // 1 % ao minuto
            valor = valor.multiply(BigDecimal.valueOf(fator))
                         .setScale(2, RoundingMode.HALF_UP);

            PreparedStatement psUp = con.prepareStatement(
                "UPDATE investimento SET valor = ?, ultima_att = ? WHERE id = ?");
            psUp.setBigDecimal(1, valor);
            psUp.setTimestamp(2, agoraTs);
            psUp.setInt(3, investId);
            psUp.executeUpdate();
        }
        return valor;
    }

    /* ---------- GET ---------- */
    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp)
            throws ServletException, IOException {

        HttpSession ses = req.getSession(false);
        if (ses == null || ses.getAttribute("idUsuario") == null) {
            resp.sendRedirect("login");
            return;
        }
        int userId = (int) ses.getAttribute("idUsuario");

        BigDecimal valorAtual = BigDecimal.ZERO;
        try (Connection con = DriverManager.getConnection(URL, USER, PASS)) {
            valorAtual = lazyUpdate(con, userId);
        } catch (SQLException e) {
            e.printStackTrace();
        }

        /* ---------- HTML ---------- */
        resp.setContentType("text/html;charset=UTF-8");
        PrintWriter out = resp.getWriter();

        out.println("<!DOCTYPE html><html lang='pt-br'><head>");
        out.println("<meta charset='UTF-8'><meta name='viewport' content='width=device-width, initial-scale=1.0'>");
        out.println("<title>Investimento – Banco Campos</title>");
        out.println("<style>");
        out.println(":root{--bg:#0b1c2c;--accent:#d4af37;--card:#13273a;--text:#fff;--ok:#2ecc71;--erro:#e74c3c}");
        out.println("*{box-sizing:border-box;margin:0;padding:0;font-family:'Segoe UI',sans-serif}");
        out.println("body{background:var(--bg);color:var(--text);display:flex;flex-direction:column;align-items:center;padding:40px}");
        out.println(".card{background:var(--card);padding:40px 32px;border-radius:10px;box-shadow:0 10px 18px rgba(0,0,0,.4);width:90%;max-width:460px;text-align:center}");
        out.println("h2{color:var(--accent);margin-bottom:12px}");
        out.println(".valor{font-size:28px;font-weight:bold;color:var(--accent);margin-bottom:20px}");
        out.println("form{margin:14px 0}");
        out.println("input{padding:10px;border-radius:6px;border:none;width:160px;margin-bottom:8px}");
        out.println(".btn{padding:10px 24px;border:none;border-radius:6px;font-weight:bold;cursor:pointer}");
        out.println(".investir{background:var(--accent);color:#000}");
        out.println(".retirar{background:crimson;color:#fff;margin-left:8px}");
        out.println(".btn:hover{filter:brightness(1.1)}");
        out.println(".msg{margin-top:12px;font-weight:600}");
        out.println("a.link{display:inline-block;margin-top:25px;color:var(--accent);text-decoration:none}");
        out.println("</style></head><body>");

        out.println("<div class='card'>");
        out.println("<h2>Poupança Campos</h2>");
        out.println("<div class='valor'>R$ " + valorAtual.toPlainString() + "</div>");

        String ok  = (String) ses.getAttribute("msgInv");
        String err = (String) ses.getAttribute("erroInv");
        if (ok  != null){ out.println("<div class='msg' style='color:var(--ok)'>"+ok+"</div>");  ses.removeAttribute("msgInv"); }
        if (err != null){ out.println("<div class='msg' style='color:var(--erro)'>"+err+"</div>");ses.removeAttribute("erroInv"); }

        /* formulários separados para Investir e Retirar */
        out.println("<form method='post' action='investimento'>");
        out.println("<input type='number' step='0.01' name='valor' placeholder='Valor' required><br>");
        out.println("<button class='btn investir' name='op' value='investir'>Investir</button>");
        out.println("<button class='btn retirar' name='op' value='retirar'>Retirar</button>");
        out.println("</form>");

        out.println("<a class='link' href='painel'>&larr; Voltar ao Painel</a>");
        out.println("</div></body></html>");
    }

    /* ---------- POST ---------- */
    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp)
            throws ServletException, IOException {

        HttpSession ses = req.getSession(false);
        if (ses == null || ses.getAttribute("idUsuario") == null) {
            resp.sendRedirect("login");
            return;
        }
        int userId = (int) ses.getAttribute("idUsuario");
        String op   = req.getParameter("op");          // investir ou retirar
        BigDecimal valor;
        try { valor = new BigDecimal(req.getParameter("valor")).setScale(2); }
        catch (Exception e){ ses.setAttribute("erroInv","Valor inválido."); resp.sendRedirect("investimento"); return; }

        try (Connection con = DriverManager.getConnection(URL, USER, PASS)) {
            con.setAutoCommit(false);

            /* Lazy‑update + busca saldo conta */
            BigDecimal valorInvest = lazyUpdate(con, userId);

            PreparedStatement psConta = con.prepareStatement(
                "SELECT id, saldo FROM conta WHERE usuario_id = ?");
            psConta.setInt(1, userId);
            ResultSet rsC = psConta.executeQuery();
            if (!rsC.next()) throw new SQLException("Conta não encontrada");
            int idConta = rsC.getInt("id");
            BigDecimal saldoConta = rsC.getBigDecimal("saldo");

            if ("investir".equals(op)) {
                if (saldoConta.compareTo(valor) < 0) {
                    ses.setAttribute("erroInv", "Saldo insuficiente na conta.");
                    resp.sendRedirect("investimento"); return;
                }

                // debita conta
                PreparedStatement deb = con.prepareStatement(
                    "UPDATE conta SET saldo = saldo - ? WHERE id = ?");
                deb.setBigDecimal(1, valor); deb.setInt(2, idConta); deb.executeUpdate();

                // credita investimento
                valorInvest = valorInvest.add(valor);
                PreparedStatement upInv = con.prepareStatement(
                    "UPDATE investimento SET valor = ?, ultima_att = CURRENT_TIMESTAMP WHERE usuario_id = ?");
                upInv.setBigDecimal(1, valorInvest); upInv.setInt(2, userId); upInv.executeUpdate();

                // transação
                PreparedStatement pt = con.prepareStatement(
                    "INSERT INTO transacao (conta_origem, tipo, valor) VALUES (?, 'investimento', ?)");
                pt.setInt(1, idConta); pt.setBigDecimal(2, valor); pt.executeUpdate();

                ses.setAttribute("msgInv", "Investimento realizado com sucesso!");

            } else if ("retirar".equals(op)) {
                if (valorInvest.compareTo(valor) < 0) {
                    ses.setAttribute("erroInv", "Valor maior que o investido.");
                    resp.sendRedirect("investimento"); return;
                }

                // credita conta
                PreparedStatement cred = con.prepareStatement(
                    "UPDATE conta SET saldo = saldo + ? WHERE id = ?");
                cred.setBigDecimal(1, valor); cred.setInt(2, idConta); cred.executeUpdate();

                // debita investimento
                valorInvest = valorInvest.subtract(valor);
                PreparedStatement upInv = con.prepareStatement(
                    "UPDATE investimento SET valor = ?, ultima_att = CURRENT_TIMESTAMP WHERE usuario_id = ?");
                upInv.setBigDecimal(1, valorInvest); upInv.setInt(2, userId); upInv.executeUpdate();

                // transação
                PreparedStatement pt = con.prepareStatement(
                    "INSERT INTO transacao (conta_destino, tipo, valor) VALUES (?, 'resgate', ?)");
                pt.setInt(1, idConta); pt.setBigDecimal(2, valor); pt.executeUpdate();

                ses.setAttribute("msgInv", "Resgate realizado com sucesso!");
            }

            con.commit();
        } catch (SQLException e) {
            e.printStackTrace();
            ses.setAttribute("erroInv", "Erro: " + e.getMessage());
        }

        resp.sendRedirect("investimento");
    }
}
